; Упражнение 1.7.
; Проверка good-enough?, которую мы использовали для вычисления квадратных корней, будет
; довольно неэффективна для поиска квадратных корней от очень маленьких чисел. Кроме того, в
; настоящих компьютерах арифметические операции почти всегда вычисляются с ограниченной точностью. Поэтому наш тест оказывается неадекватным и для очень больших чисел. Альтернативный
; подход к реализации good-enough? состоит в том, чтобы следить, как от одной итерации к другой изменяется guess, и остановиться, когда изменение оказывается небольшой долей значения
; приближения. Разработайте процедуру вычисления квадратного корня, которая использует такой
; вариант проверки на завершение. Верно ли, что на больших и маленьких числах она работает
; лучше?
(define (sqrt-iter guess oldguess x)
(if (good-enough? guess oldguess x)
guess
(sqrt-iter (improve guess x) guess
x)))
; Старый good-enough?
; (define (good-enough? guess x)
; (< (abs (- (square guess) x)) 0.001))
(define (improve guess x)
(average guess (/ x guess)))
(define (average x y)
(/ (+ x y) 2))
(define (square x) (* x x))
(define (good-enough? guess oldguess x)
(< (abs (- guess oldguess)) 0.00001))
(sqrt-iter 0.0001 0.00001 0.004)
;=> 0.06324555320407796
(sqrt-iter 0.0001 0.00001 0.0016)
;=> 0.040000000102028255
(sqrt-iter 2 1 100)
;=> 10